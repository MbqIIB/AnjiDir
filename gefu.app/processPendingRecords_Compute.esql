CREATE COMPUTE MODULE processPendingRecords_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL processPendingRecords();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE processPendingRecords() BEGIN		
		DECLARE I INTEGER 1;
		DECLARE rs ROW;
		DECLARE inCCSID INT;
		DECLARE inEncoding INT;
		DECLARE blobMsg BLOB;

		SET rs.rows[] = 
			SELECT A.ID, A.FILE_NAME, A.SERIALIZED_RECORD, A.RECORD_NUM, A.STEP1_IUR_NUMBER, A.STEP2_IUR_NUMBER, A.STEP3_IUR_NUMBER,
				A.SERIALIZED_RECORD, A.AT_STEP
				FROM Database.GEFU_INFILE AS A 
				WHERE A.AT_STEP < 4;
				
		DECLARE J INTEGER CARDINALITY(rs.*[]);
		WHILE I <= J DO
			SET OutputRoot = InputRoot;
			
			IF rs.rows[I].AT_STEP = 1 THEN
				SET OutputRoot.BLOB.IUR_NUMBER = rs.rows[I].STEP1_IUR_NUMBER;
			ELSEIF rs.rows[I].AT_STEP = 2 THEN
				SET OutputRoot.BLOB.IUR_NUMBER = rs.rows[I].STEP2_IUR_NUMBER;
			ELSEIF rs.rows[I].AT_STEP = 3 THEN
				SET OutputRoot.BLOB.IUR_NUMBER = rs.rows[I].STEP3_IUR_NUMBER;
			ELSE
				-- unreachble code				
			END IF;

			SET inCCSID = CAST(InputRoot.Properties.CodedCharSetId AS INT);
			SET inEncoding = CAST(InputRoot.Properties.Encoding AS INT);
			SET blobMsg = CAST(rs.rows[I].SERIALIZED_RECORD AS BLOB CCSID inCCSID ENCODING inEncoding);
			-- creating the gefu model from the serialized record in gefu infile
			CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL')
			PARSE(blobMsg ENCODING inEncoding CCSID inCCSID SET '' TYPE '{http://www.quantiguous.com/dfdl/gefuRecordFormat.xsd}:gefuRecordFormat' OPTIONS RootBitStream);
							
			SET OutputRoot.BLOB.ID = rs.rows[I].ID;			
			SET OutputRoot.BLOB.RECORD_NUM = rs.rows[I].RECORD_NUM;
			SET OutputRoot.BLOB.FILE_NAME = rs.rows[I].FILE_NAME;
			SET OutputRoot.BLOB.AT_STEP = rs.rows[I].AT_STEP;	
			PROPAGATE;
			SET I = I + 1;
		END WHILE;

	END;
END MODULE;
