BROKER SCHEMA gen
DECLARE ns13 NAMESPACE 'http://www.quantiguous.com/FI/customer.xsd';


CREATE COMPUTE MODULE openGroupLoanAccount_Request_Response_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		SET OutputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns17:customerGroup.ns18:batchID = getlBatchID('HO_04_BATCHID');
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(OutputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns17:customerGroup.customers.ns13:customer[]);
		WHILE I <= J DO
			IF CARDINALITY(OutputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns17:customerGroup.customers.ns13:customer[I].existingCustomer.[]) > 0 THEN
				SET OutputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns17:customerGroup.customers.ns13:customer[I].existingCustomer.loanAccount.ns18:batchID = getlBatchID('HO_01_BATCHID');
			ELSEIF CARDINALITY(OutputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns17:customerGroup.customers.ns13:customer[I].newCustomer.[]) > 0 THEN
				SET OutputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns17:customerGroup.customers.ns13:customer[I].newCustomer.ns18:batchID = getlBatchID('HO_CU_BATCHID');
				SET OutputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns17:customerGroup.customers.ns13:customer[I].newCustomer.savingAccount.ns18:batchID = getlBatchID('HO_A0_BATCHID');
				SET OutputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns17:customerGroup.customers.ns13:customer[I].newCustomer.savingAccount.loanAccount.ns18:batchID = getlBatchID('HO_01_BATCHID');		
			END IF;
			SET I = I + 1;
		END WHILE;
	END;
	
	CREATE FUNCTION getlBatchID(piMnemonic CHARACTER) RETURNS INTEGER
	BEGIN
		DECLARE lBatchID CHARACTER;
		
		UPDATE Database.RCDSSYSPARAMS SET "VALUE" = RCDSSYSPARAMS.VALUE + 1 WHERE RCDSSYSPARAMS.MNEMONIC = piMnemonic;
			
		SET lBatchID = THE(SELECT ITEM RCDSSYSPARAMS.VALUE FROM Database.RCDSSYSPARAMS WHERE RCDSSYSPARAMS.MNEMONIC = piMnemonic);
		
		RETURN CAST(lBatchID AS INTEGER);
	END;
END MODULE;
