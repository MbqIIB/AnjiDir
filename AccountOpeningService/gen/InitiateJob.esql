BROKER SCHEMA gen

CREATE COMPUTE MODULE InitiateJob_Compute

	CREATE PROCEDURE loanAccount(IN batchID INTEGER, IN partnerID INTEGER, IN fileName CHARACTER) LANGUAGE DATABASE EXTERNAL NAME "dbo.HOPROCESS01";
	CREATE PROCEDURE center(IN batchID INTEGER, IN partnerID INTEGER, IN fileName CHARACTER) LANGUAGE DATABASE EXTERNAL NAME "dbo.HOPROCESS02";
	CREATE PROCEDURE group(IN batchID INTEGER, IN partnerID INTEGER, IN fileName CHARACTER) LANGUAGE DATABASE EXTERNAL NAME "dbo.HOPROCESS04";
	CREATE PROCEDURE loanDisbursal(IN batchID INTEGER, IN partnerID INTEGER, IN fileName CHARACTER) LANGUAGE DATABASE EXTERNAL NAME "dbo.HOPROCESS06";
	CREATE PROCEDURE savingAccount(IN batchID INTEGER, IN partnerID INTEGER, IN fileName CHARACTER) LANGUAGE DATABASE EXTERNAL NAME "dbo.HOPROCESS40";
	CREATE PROCEDURE customer(IN batchID INTEGER, IN partnerID INTEGER, IN fileName CHARACTER) LANGUAGE DATABASE EXTERNAL NAME "dbo.HOPROCESSCU";

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		
		IF InputLocalEnvironment.Variables.operation = 1 THEN
			CALL loanAccount(1,22,'hello');
			--CALL myProc2(2,22,'hello');
		ELSE 
			CALL loanAccount(99,1001,'myProc2');
			--CALL myProc2(100,22,'hello');
		END IF;
		RETURN TRUE;
	END;


	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

END MODULE;
