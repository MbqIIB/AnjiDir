BROKER SCHEMA getConsumerCreditReport
DECLARE equifax NAMESPACE 'http://services.equifax.com/eport/ws/schemas/1.0';
DECLARE aos NAMESPACE 'http://AccountOpeningService';


CREATE COMPUTE MODULE getConsumerCreditReport_Request_Response_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE lMfiInst BOOLEAN;
		DECLARE isOutstandingBlance BOOLEAN;
		DECLARE isWrittenOffAmount BOOLEAN;
		DECLARE isPastDueAmount BOOLEAN;
		DECLARE lInstitutionCount INTEGER;
		DECLARE lOutstandingAmount DECIMAL;
		DECLARE lWrittenOffAmount DECIMAL;		
		DECLARE lPastDueAmount DECIMAL;
		DECLARE lcreditDecisionReason CHARACTER;
		DECLARE lInstitutions CHARACTER;
		DECLARE lCount INTEGER;
		DECLARE K INTEGER 1;
		DECLARE J INTEGER;
		--SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse = '';
		SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditReport = InputRoot.SOAP.Body.equifax:InquiryResponse;
		-- check if errors are present
		IF CARDINALITY(InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:Error.[]) > 0 THEN
			IF (InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:Error.equifax:ErrorCode='00') THEN
		  		SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditApproved = TRUE;
				SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditDecisionReason = 'Consumer not found.';
			ELSE
		  		SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditApproved = FALSE;
				SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditDecisionReason = 'Error occured during processing please look for details in response';
			END IF;		
		-- in case of no error check eligibility	
		ELSEIF CARDINALITY(InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.[]) > 0 THEN
			SET J = CARDINALITY(InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.[]);
			SET lInstitutionCount = 0;
			SET lOutstandingAmount = 0;
			SET lWrittenOffAmount = 0;		
			SET lPastDueAmount = 0;
			SET lInstitutions = '*';
			WHILE K <= J DO
				IF (InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.equifax:Account[K].equifax:AccountStatus NOT IN ('Paid or closed account/zero balance', 'Charge Off/Written Off', 'Loan Submitted', 'Loan Approved, Not Yet Disbursed' , 'Loan Declined')) THEN
					IF InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.equifax:Account[K].equifax:PastDueAmount IS NOT NULL THEN
						SET lPastDueAmount = lPastDueAmount + CAST(InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.equifax:Account[K].equifax:PastDueAmount AS DECIMAL);
					END IF;
					IF NOT (InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.equifax:Account.equifax:Institution = 'The Ratnakar Bank Limited') THEN
						-- check if institution already there
						IF NOT CONTAINS(lInstitutions,('*'||InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.equifax:Account[K].equifax:Institution||'*')) THEN
						SET lInstitutionCount = lInstitutionCount + 1;
						SET lInstitutions = lInstitutions ||'*'||InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.equifax:Account[K].equifax:Institution||'*';
						END IF;
						IF InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.equifax:Account[K].equifax:CurrentBalance IS NOT NULL THEN
							SET lOutstandingAmount = lOutstandingAmount + CAST(InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.equifax:Account[K].equifax:CurrentBalance AS DECIMAL);
						END IF;
					END IF;
				END IF;
				IF InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.equifax:Account.equifax:WriteOffAmount IS NOT NULL THEN
					SET lWrittenOffAmount = lWrittenOffAmount + CAST(InputRoot.SOAP.Body.equifax:InquiryResponse.equifax:ReportData.equifax:AccountDetails.equifax:Account.equifax:WriteOffAmount AS DECIMAL);
				END IF;
				SET K = K + 1;
			END WHILE;
			
			-- call methods to get result for various criteria
			SET lMfiInst = checkNoMfiInst(lInstitutionCount);
			SET isOutstandingBlance = outstandingBalancePresent(lOutstandingAmount);
			SET isWrittenOffAmount = writtenOffAmountPresent(lWrittenOffAmount);
			SET isPastDueAmount = pastDueAmountPresent(lPastDueAmount);
			
			-- check all criteria
			IF NOT(lMfiInst AND isOutstandingBlance AND isWrittenOffAmount AND isPastDueAmount) THEN
				SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditApproved = TRUE;
				SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditDecisionReason = 'All criteria passed for approval.';
			ELSE
				SET lCount = 0;
				SET lcreditDecisionReason = '';
				IF lMfiInst THEN
					SET lCount = lCount + 1;
					SET lcreditDecisionReason = lcreditDecisionReason ||' '||CAST(lCount AS CHARACTER)||'. '||'Number of micro finance institutions greater than the limit set for approval.';
				END IF;
				IF isOutstandingBlance THEN
					SET lCount = lCount + 1;
					SET lcreditDecisionReason = lcreditDecisionReason ||' '||CAST(lCount AS CHARACTER)||'. '||'Otstanding balance greater than the limit set for approval.';	
				END IF;
				IF isWrittenOffAmount THEN
					SET lCount = lCount + 1;
					SET lcreditDecisionReason = lcreditDecisionReason ||' '||CAST(lCount AS CHARACTER)||'. '||'Written off amount greater than 0.';
				END IF;
				IF isPastDueAmount THEN
					SET lCount = lCount + 1;
					SET lcreditDecisionReason = lcreditDecisionReason ||' '||CAST(lCount AS CHARACTER)||'. '||'Past due amount greater than 0.';
				END IF;
				
				SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditApproved = FALSE;
				SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditDecisionReason = lcreditDecisionReason;
			END IF;
		ELSE
			SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditApproved = FALSE;
			SET OutputRoot.XMLNSC.aos:getConsumerCreditReportResponse.getConsumerCreditReportReply.creditDecisionReason = 'Something went wrong, please check the response or contact support.';
		END IF;
	END;

	CREATE FUNCTION checkNoMfiInst (IN piMfiInst INTEGER) RETURNS BOOLEAN
	BEGIN
		IF (piMfiInst >= 3) THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
	
	CREATE FUNCTION outstandingBalancePresent (IN pibalance DECIMAL) RETURNS BOOLEAN
	BEGIN
		IF (50000 - pibalance < 8000) THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
	
	CREATE FUNCTION writtenOffAmountPresent (IN pibalance DECIMAL) RETURNS BOOLEAN
	BEGIN
		IF (pibalance > 0) THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
	
	CREATE FUNCTION pastDueAmountPresent (IN pibalance DECIMAL) RETURNS BOOLEAN
	BEGIN
		IF (pibalance > 0) THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
	
END MODULE;
