DECLARE ns61 NAMESPACE 'http://www.quantiguous.com/FI/group.xsd';
DECLARE ns62 NAMESPACE 'http://www.quantiguous.com/FI/globalElements.xsd';
DECLARE ns NAMESPACE 'http://AccountOpeningService';

CREATE FUNCTION getBatchID(piMnemonic CHARACTER) RETURNS INTEGER
BEGIN
	DECLARE lBatchID CHARACTER;
	
	UPDATE Database.RCDSSYSPARAMS SET "VALUE" = RCDSSYSPARAMS.VALUE + 1 WHERE RCDSSYSPARAMS.MNEMONIC = piMnemonic;
		
	SET lBatchID = THE(SELECT ITEM RCDSSYSPARAMS.VALUE FROM Database.RCDSSYSPARAMS WHERE RCDSSYSPARAMS.MNEMONIC = piMnemonic);
	
	RETURN CAST(lBatchID AS INTEGER);
END;

CREATE DATABASE MODULE openGroupLoanAccountStepEngine_openGroup
	CREATE PROCEDURE group(IN batchID INTEGER, IN partnerID INTEGER, IN fileName CHARACTER, IN processID INTEGER) LANGUAGE DATABASE EXTERNAL NAME "dbo.INITIATE_BATCH_PROCESS";

	CREATE PROCEDURE verifyRecord(IN piExternalId CHARACTER)
	BEGIN 
		DECLARE lCount INTEGER;
		
		SET lCount = THE(SELECT COUNT(1) FROM Database.RCDSGROUPS WHERE  RCDSGROUPS.EXTERNALGROUPNO = piExternalId);
	    
	    DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
		
		IF lCount = 0 THEN
			PROPAGATE TO TERMINAL 'out1';
		ELSE
			PROPAGATE TO TERMINAL 'out2';
		END IF;
	
	END;

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE lBatchID INTEGER;
		DECLARE lTime CHARACTER;
		DECLARE lDate CHARACTER;
		DECLARE customerGroup REFERENCE TO Root.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.*:customerGroup;
		
		SET lBatchID = getBatchID('HO_04_BATCHID');
		SET lTime = Root.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns61:customerGroup.ns62:meetingTime;
		SET lTime = formatTime(CAST(SUBSTRING(lTime FROM 7 FOR 2) AS INTEGER), CAST(SUBSTRING(lTime FROM 10 FOR 2) AS INTEGER));
		SET lDate = CAST(Root.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns61:customerGroup.ns62:formationDate AS CHARACTER FORMAT 'dd/MM/yyyy');
		--- insert the record	
		INSERT INTO Database."[HO-GROUP-STAGING]"
		( 
			"[BATCHID]",
			"[EXTERNALGROUPNO]",
			"[GROUPNAME]",
			"[GROUPTYPE]",
			"[MINNUMBER]",
			"[MAXNUMBERS]",
			"[FORMATIONDATE]",
			"[DAYOFPERIOD]",
			"[MEETINGTIME]",
			"[MEETINGFREQUENCY]",
            "[EXTERNALCENTERID]",
            "[CENTERNAME]",
            "[MAXCENTERLIMIT]",
            "[DISTANCEFROMBRANCH]",
            "[BRANCHCODE]",
            "[OPERATINGREGIONCODE]",
            "[DESCRIPTION]",
            "[COMMENTS]",
			"[STATUS]"	
		)
		VALUES
		( 
			lBatchID,
			Root.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns61:customerGroup.ns62:externalId,
			customerGroup.groupName,
			customerGroup.groupType,
			customerGroup.minNumber,
			customerGroup.maxNumber,
			lDate,
			customerGroup.dayOfPeriod,
			lTime,
			customerGroup.meetingFrequency,
			customerGroup.externalCenterId,
			customerGroup.centerName,
			customerGroup.maximumCenterLimit,
			customerGroup.distanceFromBranch,
			Root.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns61:customerGroup.ns62:branchCode,
			Root.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns61:customerGroup.ns62:operatingRegion.operatingRegionCode,
			'New Group',
			'Good',
			'1'
		 ); 
		-- call the procedure to process the record
		CALL group(lBatchID, 0, 'file_'||Root.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns61:customerGroup.ns62:externalId,2);
		-- check if the record is processed
		CALL verifyRecord(Root.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.ns61:customerGroup.ns62:externalId);
		
		RETURN FALSE;
	END;
END MODULE;
