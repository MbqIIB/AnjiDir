BROKER SCHEMA openGroupLoanAccount
DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
DECLARE cg NAMESPACE 'http://www.quantiguous.com/FI/group.xsd';
DECLARE ge NAMESPACE 'http://www.quantiguous.com/FI/globalElements.xsd';
DECLARE cus NAMESPACE 'http://www.quantiguous.com/FI/customer.xsd';
DECLARE ns NAMESPACE 'http://AccountOpeningService';

CREATE COMPUTE MODULE checkDuplicate
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE i INTEGER 1;
		DECLARE lInternalID CHARACTER;
		DECLARE K INTEGER 1;
		DECLARE J INTEGER;
		DECLARE inRequest REFERENCE TO InputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest;

		SET OutputRoot.SOAP.Context.Namespace.(SOAP.NamespaceDecl)xmlns:soapenv = 'http://schemas.xmlsoap.org/soap/envelope/';
		
		-- check for duplicate groups
		IF isDuplicateGroup(inRequest.cg:customerGroup.ge:externalId, lInternalID) THEN
			SET OutputRoot.SOAP.Body.soapenv:Fault.detail.Message[i] = 'Group already exists, ExternalId : ' || inRequest.cg:customerGroup.ge:externalId ||  ' InternalId : ' || lInternalID;
			SET OutputLocalEnvironment.Destination.SOAP.Reply.Transport.HTTP.ReplyStatusCode = 500;
			SET i = i + 1;
		END IF;
		
		SET J = CARDINALITY(inRequest.cg:customerGroup.customers.cus:customer[]);
		WHILE K <= J DO
			IF CARDINALITY(inRequest.cg:customerGroup.customers.cus:customer[K].existingCustomer.[]) > 0 THEN
				IF isDuplicateLoan(inRequest.cg:customerGroup.customers.cus:customer[K].existingCustomer.loanAccount.ge:externalId, lInternalID) THEN
					SET OutputRoot.SOAP.Body.soapenv:Fault.detail.Message[i] = 'Loan already exists, ExternalId : ' || inRequest.cg:customerGroup.customers.cus:customer[K].existingCustomer.loanAccount.ge:externalId ||  ' InternalId : ' || lInternalID;
					SET OutputLocalEnvironment.Destination.SOAP.Reply.Transport.HTTP.ReplyStatusCode = 500;
					SET i = i + 1;
				END IF;
			ELSEIF CARDINALITY(inRequest.cg:customerGroup.customers.cus:customer[K].newCustomer.[]) > 0 THEN

				IF isDuplicateCustomer(inRequest.cg:customerGroup.customers.cus:customer[K].newCustomer.ge:externalId, lInternalID) THEN
					SET OutputRoot.SOAP.Body.soapenv:Fault.detail.Message[i] = 'Customer already exists, ExternalId : ' || inRequest.cg:customerGroup.customers.cus:customer[K].newCustomer.ge:externalId ||  ' InternalId : ' || lInternalID;
					SET OutputLocalEnvironment.Destination.SOAP.Reply.Transport.HTTP.ReplyStatusCode = 500;
					SET i = i + 1;
				END IF;
	
				IF isDuplicateSaving(inRequest.cg:customerGroup.customers.cus:customer[K].newCustomer.savingAccount.ge:externalId, lInternalID) THEN
					SET OutputRoot.SOAP.Body.soapenv:Fault.detail.Message[i] = 'Saving account already exists, ExternalId : ' || inRequest.cg:customerGroup.customers.cus:customer.newCustomer.savingAccount.ge:externalId ||  ' InternalId : ' || lInternalID;
					SET OutputLocalEnvironment.Destination.SOAP.Reply.Transport.HTTP.ReplyStatusCode = 500;
					SET i = i + 1;
				END IF;
	
				IF isDuplicateLoan(inRequest.cg:customerGroup.customers.cus:customer[K].newCustomer.savingAccount.loanAccount.ge:externalId, lInternalID) THEN
					SET OutputRoot.SOAP.Body.soapenv:Fault.detail.Message[i] = 'Loan already exists, ExternalId : ' || inRequest.cg:customerGroup.customers.cus:customer.newCustomer.savingAccount.loanAccount.ge:externalId ||  ' InternalId : ' || lInternalID;
					SET OutputLocalEnvironment.Destination.SOAP.Reply.Transport.HTTP.ReplyStatusCode = 500;
					SET i = i + 1;
				END IF;
			END IF;
			SET K = K + 1;
		END WHILE;
	
		IF OutputLocalEnvironment.Destination.SOAP.Reply.Transport.HTTP.ReplyStatusCode = 500 THEN
			-- duplicates are errors by the client, hence the faultcode
			SET OutputRoot.SOAP.Body.soapenv:Fault.faultcode = 'Client';
			SET OutputRoot.SOAP.Body.soapenv:Fault.faultactor = 'Input parameters';
			SET OutputRoot.SOAP.Body.soapenv:Fault.faultstring = 'Duplicate entity exists';
		ELSE
			-- no errors, we copy the input message and proceed
			SET OutputRoot = InputRoot;
		END IF;
		RETURN TRUE;
	END;
	
    -- check group
	CREATE FUNCTION isDuplicateGroup(IN piExternalID CHARACTER, OUT poInternalID CHARACTER) RETURNS BOOLEAN
	BEGIN
		SET poInternalID = NULL;
		SET poInternalID = THE(SELECT ITEM RCDSGROUPS.GROUPID FROM Database.RCDSGROUPS WHERE RCDSGROUPS.EXTERNALGROUPNO = piExternalID);
		IF poInternalID IS NOT NULL THEN
			RETURN TRUE;
		END IF;
		RETURN FALSE;
	END;
	
    -- check customer
	CREATE FUNCTION isDuplicateCustomer(IN piExternalID CHARACTER, OUT poInternalID CHARACTER) RETURNS BOOLEAN
	BEGIN
		SET poInternalID = NULL;
		SET poInternalID = THE(SELECT ITEM RCDSCUSTOMERS.CUSTOMERID FROM Database.RCDSCUSTOMERS WHERE RCDSCUSTOMERS.EXTERNALCUSTNO = piExternalID);
		IF poInternalID IS NOT NULL THEN
			RETURN TRUE;
		END IF;
		RETURN FALSE;
	END;
	
    -- check loan
	CREATE FUNCTION isDuplicateLoan(IN piExternalID CHARACTER, OUT poInternalID CHARACTER) RETURNS BOOLEAN
	BEGIN
		SET poInternalID = NULL;
		SET poInternalID = THE(SELECT ITEM RCDSLOANS.LOANREFNO FROM Database.RCDSLOANS WHERE RCDSLOANS.EXTERNALLOANNO = piExternalID);
		IF poInternalID IS NOT NULL THEN
			RETURN TRUE;
		END IF;
		RETURN FALSE;
	END;
	
    -- check saving
	CREATE FUNCTION isDuplicateSaving(IN piExternalID CHARACTER, OUT poInternalID CHARACTER) RETURNS BOOLEAN
	BEGIN
		SET poInternalID = NULL;
		SET poInternalID = THE(SELECT ITEM RCDSSAVINGS.SAVINGACCNO FROM Database.RCDSSAVINGS WHERE RCDSSAVINGS.EXTERNALACCNO = piExternalID);
		IF poInternalID IS NOT NULL THEN
			RETURN TRUE;
		END IF;
		RETURN FALSE;
	END;

END MODULE;


CREATE COMPUTE MODULE setDummy 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF InputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.cg:customerGroup.groupName = 'DUMMY1' THEN		
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.jobKey = 12345678;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.groupJobKey.batchID = 2001;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.groupJobKey.externalID = 12345678;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.customerJobKey[1].batchID = 12002;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.customerJobKey[1].externalID = 12345678;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.loanAccountJobKey[1].batchID = 12003;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.loanAccountJobKey[1].externalID = 1345678;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.savingAccountJobKey[1].batchID = 12004;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.savingAccountJobKey[1].externalID = 145678;
			
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.customerJobKey[2].batchID = 22002;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.customerJobKey[2].externalID = 22345678;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.loanAccountJobKey[2].batchID = 22003;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.loanAccountJobKey[2].externalID = 2345678;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.savingAccountJobKey[2].batchID = 22004;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.savingAccountJobKey[2].externalID = 245678;
			
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.customerJobKey[3].batchID = 32002;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.customerJobKey[3].externalID = 32345678;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.loanAccountJobKey[3].batchID = 32003;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.loanAccountJobKey[3].externalID = 3345678;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.savingAccountJobKey[3].batchID = 32004;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.savingAccountJobKey[3].externalID = 345678;
			
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.customerJobKey[4].batchID = 42002;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.customerJobKey[4].externalID = 42345678;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.loanAccountJobKey[4].batchID = 42003;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.loanAccountJobKey[4].externalID = 4345678;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.savingAccountJobKey[4].batchID = 42004;
			SET OutputRoot.XMLNSC.ns:openGroupLoanAccountResponse.openGroupLoanAccountReply.savingAccountJobKey[4].externalID = 445678;
		ELSEIF InputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.cg:customerGroup.groupName = 'DUMMY2'  THEN
			SET OutputRoot.SOAP.Body.soapenv:Fault.detail.Message[1] = 'Saving account already exists, ExternalId : 12345678 InternalId : 12345678';
			SET OutputRoot.SOAP.Body.soapenv:Fault.detail.Message[2] = 'Loan account already exists, ExternalId : 881723641 InternalId : 12341324';
			SET OutputRoot.SOAP.Body.soapenv:Fault.detail.Message[3] = 'Group already exists, ExternalId : 45346356345 InternalId : 345776723452';
			SET OutputRoot.SOAP.Body.soapenv:Fault.faultcode = 'Client';
			SET OutputRoot.SOAP.Body.soapenv:Fault.faultactor = 'Input parameters';
			SET OutputRoot.SOAP.Body.soapenv:Fault.faultstring = 'Duplicate entity exists';
		ELSEIF InputRoot.XMLNSC.ns:openGroupLoanAccount.openGroupLoanAccountRequest.cg:customerGroup.groupName = 'DUMMY3'  THEN
			SET OutputRoot.SOAP.Body.soapenv:Fault.detail.Message = 'Something went wrong with the open group loan creation. Please contact support.' ;
			SET OutputRoot.SOAP.Body.soapenv:Fault.faultcode = 'Server';
			SET OutputRoot.SOAP.Body.soapenv:Fault.faultactor = 'Server';
			SET OutputRoot.SOAP.Body.soapenv:Fault.faultstring = 'Error occured while processing the request';
		END IF;
	RETURN TRUE;
	END;
END MODULE;
